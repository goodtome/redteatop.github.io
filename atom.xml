<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[📙红茶的博客]]></title>
  <link href="redtea.top/atom.xml" rel="self"/>
  <link href="redtea.top/"/>
  <updated>2025-04-02T13:21:12+08:00</updated>
  <id>redtea.top/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
<follow_challenge>
    <feedId>96580351742716928</feedId>
    <userId>60934240081712128</userId>
</follow_challenge>

  <entry>
    <title type="html"><![CDATA[20250401]]></title>
    <link href="redtea.top/17435273009795.html"/>
    <updated>2025-04-02T01:08:20+08:00</updated>
    <id>redtea.top/17435273009795.html</id>
    <content type="html"><![CDATA[
<p>今天是新的一个月的开端，3月已经过去4月一个新的的开始。</p>
<p>今天分享了自己在千岛湖骑行的日常，发现还是有不少人关注了。他们惊叹于这种长距离的骑行，也惊讶于我有不一样的生活，还有朋友也希望能入坑骑行，开始咨询我自行车相关的东西。</p>
<p>很高兴能和其他人分享骑行的喜悦，让我也想起来自己刚入坑的样子，一个人不断的探索找到属于自己的快乐。那种喜悦其实是藏不住的，能让人变的很幸福。</p>
<p>同时也明白了，需要把自己的生活适当展露出来，其他人才知道了解你的生活，大家之间才会有共同的话题，能把关系拉进，走的更近一点。</p>
<p>让自己快乐，也帮助到别人，感受快乐是最美好的事情。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20250330]]></title>
    <link href="redtea.top/17434219748835.html"/>
    <updated>2025-03-31T19:52:54+08:00</updated>
    <id>redtea.top/17434219748835.html</id>
    <content type="html"><![CDATA[
<p>今日大事记：<br />
1、千岛湖骑行110KM，安全完赛。</p>
<p>今天是来千岛湖的第二天了，昨天去了淳安界首体育中心领取了参赛包，薅了不少的羊毛，体会了参赛的开心。也吃了一顿很美味的鱼头汤，不要太爽了。</p>
<p>回忆起这个不可多的的经历，想想也是一种很好的体验。不管是从决定参赛开始到比赛结束的整个过程都是非常nice的。</p>
<p>大概是在开赛前一个周，其实才开始关注比赛的信息，最开始的时候察觉到比赛当天可能会降温下雨，骑行的话会很难受。于是乎一直在等天气变好，这时候的心理也是处于，不去可惜的纠结状态，不去浪费了报名费和难得一次的千岛湖骑行体验，去了骑行体验比较不好，可能会出现失温抽筋等情况。只能坐等天气好了再作打算。</p>
<h2><a id="%E5%A4%A9%E5%85%AC%E4%BD%9C%E7%BE%8E" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>天公作美</h2>
<p>在临近要开始的前几天，在官方的群里大家都在讨论，30号的上午大概率是不下雨的，于是决定试试。由于也是没有预订酒店，开始关注酒店的信息，赛场周边的酒店早就被定完了，离得很远的酒店倒是有房间，距离上就远的不行了，30公里起步，这样来说第二天过去就很麻烦。</p>
<p>终于也是在群里蹲到了一个转让的，距离赛场就不到1公里，可以说是非常的近，价格150也很合适，于是果断拿下，开始准备去比赛的事宜。</p>
<h2><a id="%E8%B5%9B%E5%89%8D%E5%87%86%E5%A4%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>赛前准备</h2>
<p>说起赛前准备，其实就是如何让车子上高铁，定什么时候的高铁去千岛湖，千岛湖到酒店的50公里如何过去这种。 自行车上高铁的话，之前也是了解过的，是要有一个车包，把自行车拆了前轮以后装起来就行。于是乎最后买了洛克兄弟的车包，体积小非常适合携带，以后要使用的话也很方便。</p>
<p>关于交通就是定了西站到千岛湖的高铁，然后就是打哈啰顺风车过去到酒店，整个行程加起来差不多150块，也是非常的值得。</p>
<p>在去的过程中还有一个小的插曲，就是平时把前轮的螺丝宁的太紧了，导致在自己拆卸的时候无法拆下来，只能在去了一次车店帮忙拆卸和装包，才顺利的进行到了下一步。</p>
<h2><a id="%E8%89%B0%E9%9A%BE%E7%9A%84%E6%AF%94%E8%B5%9B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>艰难的比赛</h2>
<p>要说这个比赛，也有一些的遗憾，就是没有在规定的时间内完赛，被关门了，没有完成预期的目标。不过人家主办方也是挺好的，即使是被关门了，拆了计时器也能继续的往终点骑行，完成属于自己的个人赛。</p>
<p>我是在五区出发的，在检录以后，等了都块50分钟了，身体上也比较僵硬了，所以在开始骑行以后，就明显感觉到身体上有点吃不消，左腿的膝盖左侧就开始有点疼痛，记住这个疼，在之后的整个赛段中，疼痛都是伴随着的，无法消除，只能靠着坚强的意志力在不断的坚持着往终点进发。</p>
<p>在说回比赛，刚出发的时候真的很兴奋，整个人都想跟着大集团不断的冲刺，导致在速度远远超过了平时的强度，不到20公里身体就难受了。加上没有带水，直接人都傻掉了，简直骑不动，也亏的有个路边摊，在路边搞了一个脉动，才缓解了这样的痛苦。</p>
<p>前期最难的还是属于冠军岭，说起来不算很高的坡，爬起来就是很费劲，这也说明自己在爬坡上还需要在提升一下，技巧性和耐力都需要加强。</p>
<p>在58公里的地方，有个关门点，当我到达这个点的时候，刚好过了关门时间十分钟，非常的不幸，这里就算是失去了成绩了，后半程就开始休闲骑行，更多的是欣赏风景，完成整个骑行路线为主了。</p>
<p>怀着这样的想法，就一直骑行，过了60公里的补给点，吃了点香蕉喝了水继续出发，中途也发现自己腿好像确实有点不太行了，想着到 85 公里的收容点在上车，实在不行身体要紧。</p>
<p>就这么一边欣赏风景一边慢慢骑行，走到了 85 公里的收容点，一问才知道要等很久收容车才发出，由于自己的酒店也不能让我等待太久，评估了下自己的身体感觉 还有 25 公里，咬咬牙也能坚持住。继续出发，翻山越岭过隧道，终于是看见了 10km、5km、2km、1km 的牌子，看见了主会场，终于在 1 点 20 的时候结束了，花费了 4 个半小时，完成了挑战。</p>
<h2><a id="%E6%80%BB%E7%BB%93%E5%92%8C%E6%94%B6%E8%8E%B7" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>总结和收获</h2>
<p>这次挑战是有收获和遗憾的，收获了不少的比赛经验，收获了不上收容车的快乐，收获了美丽的风景，这一切都是值得的。 当然遗憾也是有的，就是没有准时完赛，没有成绩，没有收获很多的照片。下次加油了，不仅仅是比赛中成长也是在比赛中收获快乐。</p>
<p>很快乐的一次体验，对我来说非常有意义。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Render结合GitHub搭建静态网站]]></title>
    <link href="redtea.top/17431854316692.html"/>
    <updated>2025-03-29T02:10:31+08:00</updated>
    <id>redtea.top/17431854316692.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E8%B4%A6%E5%8F%B7%E7%99%BB%E5%BD%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>账号登录</h2>
<p>因为后期代码会上传到GitHub上，所以使用GitHub进行登录，方便后期拉取代码。</p>
<h3><a id="%E9%80%89%E6%8B%A9%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E7%B1%BB%E5%9E%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>选择部署应用类型</h3>
<p>可以选择的包括静态网站，web app.<br />
本次选择第一个静态网页的部署，点击new static website，然后进行到下一步。<br />
<img src="media/17431854316692/17431872358263.jpg" alt="" /></p>
<h2><a id="%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%A0%81%E5%9C%B0%E5%9D%80" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>配置代码地址</h2>
<p>可以现在从不同的地方配置代码，包括GitHub、gitlab、bitbucket以及自己的服务代码地址。</p>
<p>可以根据自己代码习惯，选择适合是的代码仓库地址，我这里选择的是GitHub，因为本身比较熟悉一点。注意选择合适的授权，将GitHub和render链接起来。</p>
<p><img src="media/17431854316692/17431874565045.jpg" alt="" /></p>
<p><img src="media/17431854316692/17431876104960.jpg" alt="" /></p>
<p>选中自己想要构建的仓库,填写相关的部署信息，注意在构建项目信息的时候可以填写到根目录下。<br />
<img src="media/17431854316692/17431877165309.jpg" alt="" /></p>
<p><img src="media/17431854316692/17431880087619.jpg" alt="" /></p>
<h2><a id="%E9%83%A8%E7%BD%B2%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>部署静态网页</h2>
<p>在填写相关信息后就能部署了，在红框中还能实时看到部署的进度，方便排查问题。<br />
<img src="media/17431854316692/17431881898851.jpg" alt="" /></p>
<h2><a id="%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>访问地址</h2>
<p>在设置setting和监视器metrics中都能找到访问的地址，并且在setting中还能对访问地址进行修改，也能通过重定向，访问到指定的域名上，需要绑定DNS。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20250327]]></title>
    <link href="redtea.top/17431177984307.html"/>
    <updated>2025-03-28T07:23:18+08:00</updated>
    <id>redtea.top/17431177984307.html</id>
    <content type="html"><![CDATA[
<p>许久没有记录一天的感受了，想想今天发生的事情都还是蛮有意思的，遂记录一下，让未来可以记住今天这样一天。</p>
<h2><a id="%E5%B0%8F%E7%BB%93" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>小结</h2>
<p>今天的大事记：<br />
1、捡漏千岛湖酒店<br />
2、成功报名余杭径山自行车比赛<br />
3、研究了新的豆浆配方</p>
<h2><a id="%E5%8D%83%E5%B2%9B%E6%B9%96%E9%85%92%E5%BA%97" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>千岛湖酒店</h2>
<p>在很早以前就报名了3月30日的hello100千岛湖自行车比赛，由于是最近几天一直在说比赛当前的天气可能会不好，会下雨，影响比赛，而且自己在今天之前也是没有订酒店的，就比较纠结是去还是不去。<br />
就其实有一种去了难受，不去可惜的感觉。不去可惜了辛苦抢到的参赛门票，可惜了很久以来的期待，去的话又会面临着雨中骑行的、交通住宿的问题，多少有点不方便的。纠结了半天，发现天气还是可以的，决定就去参赛。</p>
<p>既然决定了参赛，就开始研究了酒店住宿的问题，这个其实还是个比较大的问题，赛场的起点在淳安的界首体育中心，地方比较偏僻，加上参赛的人多，附近几公里的酒店都让人早早预定好了，现在预定的话肯定就是没有房间了，只能寻找其他的途径解决住宿问题。</p>
<p>后来想了几个办法 ，一是去小红书发帖找找合适的酒店，看看有没有酒店推荐或者拼房的朋友。二是找了官方的群，在群里找酒店转让的，通过这样的方式完成酒店的预定，三是一个保底的方案，定千岛湖市中心的店，然后再比赛当天早上货拉拉过去，距离远点，住的倒也是舒服的。 最后呢，也是在通过第二种方法，在官方的群里找到了一个合适的酒店转让的车友，完成了酒店的预定。也是比较幸运的一天，感恩。</p>
<h2><a id="%E5%BE%84%E5%B1%B1%E6%AF%94%E8%B5%9B%E6%8A%A5%E5%90%8D" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>径山比赛报名</h2>
<p>说起报名5月11日的比赛也是巧合了，在早上的时候突然看见之前买自行车的店里面店长在发布了一个参加比赛统计的东西，遂去看了下，发现其实还是蛮合适了，在杭州本地，离的也不远，骑行的距离也不长，52公里也是很好完成的，天气也是刚好的，时间上也适合，可以说是占据了天时地利了，就报名参见了。</p>
<p>后面还推荐了之前一起环太湖的车友一起去，结果他们估计也是没有看消息了，错过了报名，想去也是去不了了。</p>
<p>有时候，想要去玩也是要时机合适，能抓住机会，才能在玩到自己想要玩的东西的。</p>
<h2><a id="%E7%A0%94%E7%A9%B6%E8%B1%86%E6%B5%86%E9%85%8D%E6%96%B9" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>研究豆浆配方</h2>
<p>最近新买了一个九阳的研磨机，简单研究了下，发现是可以用来做豆浆粉的，正好也是家里还有黄豆、黑豆、芝麻这些东西，于是也是说搞就搞了，把食材炒熟，用研磨机研磨成为细粉。</p>
<p>结合一些教程，发现用白米、黑米、黑豆的比例是1:1:1的时候，做出来的豆浆即有粘稠度，味道也不赖，适当的放点糖就是更好了。</p>
<p>美食这个东西，只要是想要去研究，还是能在不断的尝试中找到一个美味的配方，并且在一次次的试吃中优化配方，成为属于自己的手艺。</p>
<h2><a id="%E5%B0%BE%E8%AE%B0" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>尾记</h2>
<p>啰嗦的写了好多，都是口水话了。是确实感觉自己文字的表达能力在下降了，没有之前22年那种输出的感觉，不过慢慢的写一写，感觉还是就会回来的。</p>
<p>对自己说，加油，幸运的一天。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[苹果日历使用设置（附上相关数据源）]]></title>
    <link href="redtea.top/17402822175763.html"/>
    <updated>2025-02-23T11:43:37+08:00</updated>
    <id>redtea.top/17402822175763.html</id>
    <content type="html"><![CDATA[
<h2><a id="%E8%AE%BE%E7%BD%AE%E4%BD%8D%E7%BD%AE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>设置位置</h2>
<p>Mac：打开 日历-&gt;文件-&gt;新建日历订阅<br />
iPhone：系统设置-&gt;密码与账户-&gt;添加账户-&gt;其他-&gt;添加已订阅的日历</p>
<h2><a id="%E8%AE%A2%E9%98%85%E6%BA%90%E4%BF%A1%E6%81%AF%EF%BC%9A" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>订阅源信息：</h2>
<p>中国法定节假日：<br />
https://<a href="https://so.csdn.net/so/search?q=calendar&amp;spm=1001.2101.3001.7020">calendar</a>.google.com/calendar/ical/pmbvm6f01ijruokq0spqa854u2ra71gt%40import.calendar.google.com/public/basic.ics</p>
<p>24节气订阅地址：<br />
<a href="https://github.com/KaitoHH/24-jieqi-ics">https://github.com/KaitoHH/24-jieqi-ics</a></p>
<blockquote>
<p><a href="https://raw.githubusercontent.com/KaitoHH/24-jieqi-ics/master/23_solar_terms_2015-01-01_2050-12-31.ics">https://raw.githubusercontent.com/KaitoHH/24-jieqi-ics/master/23_solar_terms_2015-01-01_2050-12-31.ics</a></p>
</blockquote>
<p>中国节假日补班日历：<br />
<a href="https://github.com/lanceliao/china-holiday-calender">https://github.com/lanceliao/china-holiday-calender</a></p>
<p>老黄历：<br />
<a href="https://github.com/zqzess/holiday-and-chinese-almanac-calendar?tab=readme-ov-file">https://github.com/zqzess/holiday-and-chinese-almanac-calendar?tab=readme-ov-file</a></p>
<p><a href="https://raw.githubusercontent.com/zqzess/holiday-and-chinese-almanac-calendar/main/holidays_calendar_2.ics">https://raw.githubusercontent.com/zqzess/holiday-and-chinese-almanac-calendar/main/holidays_calendar_2.ics</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[回忆不散：QQ空间导出助手，保存你的青春记忆]]></title>
    <link href="redtea.top/17367394795351.html"/>
    <updated>2025-01-13T11:37:59+08:00</updated>
    <id>redtea.top/17367394795351.html</id>
    <content type="html"><![CDATA[
<h1><a id="%E5%89%8D%E8%A8%80" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>前言</h1>
<p>随着年龄的增长，我们对过去的美好时光愈加怀念。在过去的时间总有留下了一些美丽的瞬间。</p>
<p>在那韶华的回忆里，QQ 空间的说说、留言、相册、访客、黄钻，总有一个牵动过我们的心❤️。</p>
<p>虽然 QQ空间依旧还在，而我们已经不在青葱，已然日渐成熟，当年的那些人也渐行渐远，只留下一些零碎的回忆。</p>
<p>如今，发现了一个可以将这些回忆保存到现实中的工具——QQ空间导出助手。这款工具让我们能够在充满回忆的世界中徜徉。开发者的一段话也让我深有感触：</p>
<blockquote>
<p>落叶随风，青春，稍纵即逝，QQ空间，一个承载了很多人的青春的地方。</p>
<p>然而，新浪博客相册宣布停止运营，网易相册关闭，QQ账号支持注销等等，无不意味着，互联网产品都有着自己的生命周期，但生命周期到了尽头，我们的数据怎么办。</p>
<p>数据，还是要本地备份一份的，QQ空间导出助手的谷歌扩展，可以QQ空间的日志、私密日志、说说、相册、留言板、QQ好友、视频为文件，供永久保存。</p>
</blockquote>
<h1><a id="%E6%AD%A3%E9%A4%90" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>正餐</h1>
<h2><a id="%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>简单介绍</h2>
<p>这是一个 QQ 空间的导出助手，能帮助解决说说、照片等的导出服务，针对大量的图片导出非常方便，并且还是原图。</p>
<p>可以轻松将这些珍贵的回忆保存下来，不再担心它们随互联网产品的生命周期消失。</p>
<h2><a id="%E6%8F%92%E4%BB%B6%E4%B8%8B%E8%BD%BD" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>插件下载</h2>
<p>下载的途径有好几个：</p>
<ul>
<li>谷歌商店</li>
<li>GitHub 仓库</li>
<li>如果前两个途径都没有下载到，可以后台发送  20240723 获取安装包，解压进行安装。</li>
</ul>
<p>如果是安装包的话，可以这样进行设置：</p>
<ul>
<li>打开浏览器设置按钮</li>
<li>找到扩展程序</li>
<li>加载已经解压的文件</li>
<li>成功后会在标题栏中显示标识<br />
<img src="media/17367394795351/Pasted%20image%2020240723185532.png" alt="Pasted image 20240723185532" /></li>
</ul>
<h2><a id="%E9%85%8D%E7%BD%AE%E6%8F%92%E4%BB%B6" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>配置插件</h2>
<p>打开小图标会显示可以进行备份的数据，这次主要是为了备份相册，所以单独选择相册。</p>
<p>在相册列表中选择需要进行备份的相册。<br />
注意最后一点比较重要，一定要关闭浏览器的 下载前询问每个文件的保存位置这个选项。<br />
<img src="media/17367394795351/Pasted%20image%2020240723190135.png" alt="Pasted image 20240723190135" /></p>
<h2><a id="%E5%AF%BC%E5%87%BA%E7%85%A7%E7%89%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>导出照片</h2>
<p>点击开始备份以后，会显示下载进度，显示下载的数量以及一些对应的下载日志。</p>
<p>不出意外的话，都能成功。</p>
<p><img src="media/17367394795351/%E7%A9%BA%E9%97%B4%E5%AF%BC%E5%87%BA%E5%8A%A9%E6%89%8B2.png" alt="空间导出助手2" /></p>
<p>下载的进度可以实时进行查看，下载完成后会显示如下界面，然后去自己的电脑文件夹中查看下载的图片。</p>
<p><img src="media/17367394795351/%E7%A9%BA%E9%97%B4%E5%8A%A9%E6%89%8B4.png" alt="空间助手4" /></p>
<h2><a id="%E6%96%87%E4%BB%B6%E6%9F%A5%E7%9C%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>文件查看</h2>
<p>在下载好的文件中查看图片，我一次性下载了 6600 多张照片，200 个视频都成功了，说明这个插件还是很稳定的。</p>
<p><img src="media/17367394795351/%E7%A9%BA%E9%97%B4%E5%AF%BC%E5%87%BA%E5%8A%A9%E6%89%8B3.png" alt="空间导出助手3" /></p>
<p><img src="media/17367394795351/Pasted%20image%2020240723191210.png" alt="Pasted image 20240723191210" /></p>
<h1><a id="%E7%BB%93%E8%AF%AD" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>结语</h1>
<p>青春是一场回忆，照片是承载的工具，也许在未来的时间中，我们看见照片，又想起了当年的懵懂青涩时光，愿前行，友人在。</p>
<p>备注说明：<br />
插件来自于项目：<a href="https://github.com/goodtome/QZoneExport">QQ空间导出助手</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[智慧的指引：三则经典语录与个人进步之道]]></title>
    <link href="redtea.top/17366921571661.html"/>
    <updated>2025-01-12T22:29:17+08:00</updated>
    <id>redtea.top/17366921571661.html</id>
    <content type="html"><![CDATA[
<p>记得在看《穷查理宝典》的时候，有看到这几句话</p>
<blockquote>
<p>“我这辈子遇到的聪明人没有不每天阅读的——一个都没有。”</p>
<p>“你需要了解勤奋的重要性：坐下来，把事情完成。”</p>
<p>“人生在不同阶段会遇到不同的难题，非常棘手的难题。为了应付这些困难要让自己置身于朋友和家人的爱之中。”</p>
</blockquote>
<p>看起来，每一句话都像是一个个的鸡汤，实际上呢每一个都是实践出来的道理。</p>
<h2><a id="1%E4%B9%A6%E4%B8%AD%E6%99%BA%E6%85%A7%EF%BC%9A%E7%9F%A5%E8%AF%86%E7%9A%84%E7%A7%AF%E7%B4%AF%E4%B8%8E%E4%B8%AA%E4%BA%BA%E8%BF%9B%E6%AD%A5%E4%B9%8B%E8%B7%AF" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1 书中智慧：知识的积累与个人进步之路</h2>
<p>就像是书中提到的<code>我这辈子遇到的聪明人没有不每天阅读的——一个都没有</code> ,读书就是普通人的一条的进阶的路子。</p>
<p>人这一生是要读二十来的书，每一个阶段接受的教育呢，其实也是有用的，也许在当时看是有一些的不理解或者学不明白。</p>
<p>只有在未来的一点时间点上，积累的足够多的经验和知识，才能更加理解。读书，就是让人进步的，应证那句话，腹有诗书气自华，也会爬上高尔基的名言书是人类进步的阶梯。</p>
<p>书读百遍，其义自见，只有坚持读书，才会让自己的价值最大化。</p>
<h2><a id="2%E5%8B%A4%E5%A5%8B%E4%B9%8B%E9%81%93%EF%BC%9A%E6%88%90%E5%8A%9F%E7%9A%84%E5%85%B3%E9%94%AE%E5%92%8C%E5%A4%A9%E8%B5%8B%E7%9A%84%E7%9C%9F%E7%9B%B8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2 勤奋之道：成功的关键和天赋的真相</h2>
<p>勤奋，这是必不可少的。</p>
<p>在历史长河上，看那些有成就的有作为的人，都会有勤奋的基因，就像一个比喻，明明可以靠颜值取胜，非要依赖才华，关键还真就才华横溢。</p>
<p>真正有天赋的天才很少，大家都是普通人，都完全可以靠勤奋收获成功。而且所谓的天才，也不过是百分之九十九的汗水，加上百分之一的天赋。所以勤奋是必须的，不管是做事情还是做人。</p>
<p>静下心，安心做事，一件一件的把目标完成，积累自己的经验，在达到一定的量以后就能不一样了。</p>
<h2><a id="3%E7%88%B1%E4%B8%8E%E6%94%AF%E6%8C%81%EF%BC%9A%E5%85%8B%E6%9C%8D%E4%BA%BA%E7%94%9F%E9%9A%BE%E9%A2%98%E7%9A%84%E5%8A%9B%E9%87%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3 爱与支持：克服人生难题的力量</h2>
<p>人生是一场漫长的旅程，而这个旅程绝不总是一帆风顺的。我们都会遇到各种各样的挑战和困难，有时候这些问题似乎难以独自承担，容易让人感到力不从心。</p>
<p>正如古语所说，独木难支。有时，独自应对问题可能令人感到孤立和不安。在这些困难时刻，亲人和朋友的爱和支持变得尤为重要。他们的关心和鼓励可以让一切变得更加容易。</p>
<p>家人和亲朋好友是我们生命中的支柱。他们不仅与我们分享喜悦，还在我们最困难的时刻伸出援手。他们是我们生命中的坚实后盾，不论我们遇到什么挑战，都能给予我们鼓励和信心。</p>
<p>所以，无论我们面对多大的难题，无论问题有多棘手，拥有家人和朋友的爱与支持都能为我们提供前行的力量。他们共同构建了我们的人生支撑体系，帮助我们克服困难，向前迈进。这个力量的来源，正是在爱与支持中寻找答案的过程中。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python_测试_异步库插件asyncio]]></title>
    <link href="redtea.top/17366909671985.html"/>
    <updated>2025-01-12T22:09:27+08:00</updated>
    <id>redtea.top/17366909671985.html</id>
    <content type="html"><![CDATA[
<p>在python的测试中，如果实际的代码中有异步的代码，如果单纯的调用代码是会出现报错的问题。<br />
需要在测试代码中添加插件pytest-asyncio,这是一个专注于进行异步测试的pytest的插件。</p>
<h2><a id="1%E5%AE%89%E8%A3%85" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1 安装</h2>
<p>根据官网的连接：<a href="https://pypi.org/project/pytest-asyncio/">pytest-asyncio · PyPI</a><br />
在终端下载对应的库: <code>$ pip install pytest-asyncio</code><br />
在测试代码方法上添加注解： <code>@@pytest.mark.asyncio</code></p>
<h2><a id="2%E4%BD%BF%E7%94%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2 使用</h2>
<p>具体的使用办法可以参见以下代码：</p>
<pre class="line-numbers"><code class="language-python">@pytest.mark.asyncio
async def test_some_asyncio_code():
    res = await library.do_something()
    assert b&quot;expected result&quot; == res
</code></pre>
<h2><a id="3%E6%A1%88%E4%BE%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3 案例</h2>
<p>在不同的测试场景中，都是能使用到插件的。</p>
<h3><a id="3-1%E5%9C%A8%E5%90%8C%E4%B8%80%E4%BA%8B%E4%BB%B6-loop%E4%B8%AD%E8%BF%90%E8%A1%8Cclass%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E6%B5%8B%E8%AF%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3.1 在同一事件loop中运行class中的所有测试</h3>
<p>所有测试都可以通过使用pytest.mark.asyncio（scope =“ class”）标记在同一事件循环中运行。通过使用Asyncio标记作为类装饰器，可以很容易地实现这一点。</p>
<pre class="line-numbers"><code class="language-python">import asyncio

import pytest

@pytest.mark.asyncio(scope=&quot;class&quot;)
class TestInOneEventLoopPerClass:
    loop: asyncio.AbstractEventLoop

    async def test_remember_loop(self):
        TestInOneEventLoopPerClass.loop = asyncio.get_running_loop()

    async def test_assert_same_loop(self):
        assert asyncio.get_running_loop() is TestInOneEventLoopPerClass.loop
</code></pre>
<h3><a id="3-2%E5%9C%A8%E5%90%8C%E4%B8%80%E4%BA%8B%E4%BB%B6-loop%E4%B8%AD%E8%BF%90%E8%A1%8Cmodule%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E6%B5%8B%E8%AF%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3.2 在同一事件loop中运行module中的所有测试</h3>
<p>所有测试都可以通过使用pytest.mark.asyncio（scope =“ module”）标记在同一事件循环中运行。通过向您的模块添加pytestmark语句可以轻松实现这一点。</p>
<pre class="line-numbers"><code class="language-python">import asyncio

import pytest

pytestmark = pytest.mark.asyncio(scope=&quot;module&quot;)

loop: asyncio.AbstractEventLoop

async def test_remember_loop():
    global loop
    loop = asyncio.get_running_loop()

async def test_assert_same_loop():
    global loop
    assert asyncio.get_running_loop() is loop

</code></pre>
<h3><a id="3-3%E5%9C%A8%E5%90%8C%E4%B8%80%E4%BA%8B%E4%BB%B6-loop%E4%B8%AD%E8%BF%90%E8%A1%8C%E5%8C%85%E8%A3%85%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E6%B5%8B%E8%AF%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3.3 在同一事件loop中运行包装中的所有测试</h3>
<p>所有测试都可以通过使用pytest.mark.asyncio（scope =“ package”）标记在同一事件循环中。将以下代码添加到测试包的__init__.py：</p>
<p>请注意，此标记不会传递给子弹中的测试。子包构成了自己的单独包装。</p>
<pre class="line-numbers"><code class="language-python">import pytest

pytestmark = pytest.mark.asyncio(scope=&quot;package&quot;)
</code></pre>
<h3><a id="3-4%E5%9C%A8%E5%90%8C%E4%B8%80%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E4%B8%AD%E8%BF%9B%E8%A1%8C%E4%BC%9A%E8%AF%9D%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E6%B5%8B%E8%AF%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3.4 在同一事件循环中进行会话中的所有测试</h3>
<p>所有测试都可以通过使用pytest.mark.asyncio（scope =“ session”）标记在同一事件循环中运行。标记所有测试的最简单方法是通过pytest_collection_modifyitems挂钩在您的测试套件的根文件夹中的conftest.py。</p>
<pre class="line-numbers"><code class="language-python">import pytest

from pytest_asyncio import is_async_test

def pytest_collection_modifyitems(items):
    pytest_asyncio_tests = (item for item in items if is_async_test(item))
    session_scope_marker = pytest.mark.asyncio(scope=&quot;session&quot;)
    for async_test in pytest_asyncio_tests:
        async_test.add_marker(session_scope_marker, append=False)
</code></pre>
<h3><a id="3-5%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%B5%8B%E8%AF%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3.5 使用不同的事件循环测试</h3>
<p>参数化event_loop_policy灯具参数参数所有异步测试。下面的示例会导致所有异步测试多次运行，一次在固定框架参数中为每个事件循环运行：</p>
<pre class="line-numbers"><code class="language-python">import asyncio
from asyncio import DefaultEventLoopPolicy

import pytest

class CustomEventLoopPolicy(DefaultEventLoopPolicy):
    pass

@pytest.fixture(
    scope=&quot;session&quot;,
    params=(
        CustomEventLoopPolicy(),
        CustomEventLoopPolicy(),
    ),
)
def event_loop_policy(request):
    return request.param

@pytest.mark.asyncio
async def test_uses_custom_event_loop_policy():
    assert isinstance(asyncio.get_event_loop_policy(), CustomEventLoopPolicy)
</code></pre>
<h3><a id="3-6-events%E4%BA%8B%E4%BB%B6" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3.6 events事件</h3>
<p>参数化event_loop_policy 参数参数所有异步测试。下面的示例会导致所有异步测试多次运行，一次在固定框架参数中为每个事件循环运行：</p>
<p>如果您只希望测试的一个子集与不同的事件循环一起运行，则可以选择将fixture的范围限制为包、模块或类。</p>
<pre class="line-numbers"><code class="language-python">import asyncio
from asyncio import DefaultEventLoopPolicy

import pytest

class CustomEventLoopPolicy(DefaultEventLoopPolicy):
    pass

@pytest.fixture(
    scope=&quot;session&quot;,
    params=(
        CustomEventLoopPolicy(),
        CustomEventLoopPolicy(),
    ),
)
def event_loop_policy(request):
    return request.param

@pytest.mark.asyncio
async def test_uses_custom_event_loop_policy():
    assert isinstance(asyncio.get_event_loop_policy(), CustomEventLoopPolicy)
</code></pre>
<h3><a id="3-7%E5%A6%82%E4%BD%95%E5%AF%B9-uvloop%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3.7 如何对uvloop进行测试</h3>
<p>RedeFinig event_loop_policy固定装置将参数所有异步测试。以下示例会导致所有异步测试多次运行，一次在固定夹参数中为每个事件循环进行一次：替换您的conftest.py中的默认事件循环策略：</p>
<p>如果您只希望使用UVloop运行测试的子集，则可以选择将固定装置的范围限制为包装，模块或类。</p>
<pre class="line-numbers"><code class="language-python">import pytest
import uvloop

@pytest.fixture(scope=&quot;session&quot;)
def event_loop_policy():
    return uvloop.EventLoopPolicy()
</code></pre>
<h3><a id="3-8%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%87%BD%E6%95%B0%E6%98%AF%E4%B8%8D%E6%98%AF%E4%B8%BA%E5%BC%82%E6%AD%A5" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3.8 如何判断函数是不是为异步</h3>
<p>使用pytest_asyncio.is_async_item来确定测试项目是否是异步和由pytest-assyncio管理的。</p>
<pre class="line-numbers"><code class="language-python">from pytest_asyncio import is_async_test

def pytest_collection_modifyitems(items):
    for item in items:
        if is_async_test(item):
            pass
</code></pre>
<h2><a id="4%E6%B3%A8%E6%84%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4 注意</h2>
<p>这个插件也有自己的问题：<br />
它不支持标准联合库的测试类。建议用户使用UnitTest.isolatedAsynciotestcase或异步框架（例如异步）。</p>
<p>本文作者：redtea 红茶的博客<br />
本文链接：<a href="https://redtea.top/16964281020029.html">https://redtea.top/16964281020029.html</a><br />
版权声明：本文采用 知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，非商业转载及引用请注明出处（作者、原文链接），商业转载请联系作者获得授权。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TypeScript的严格语法限制解决方案]]></title>
    <link href="redtea.top/17366924748647.html"/>
    <updated>2025-01-12T22:34:34+08:00</updated>
    <id>redtea.top/17366924748647.html</id>
    <content type="html"><![CDATA[
<p>在进行vue的开发中，在写ts文件时候，遇到有这么一个报错。经过查阅资料和实际进行解决，问题就是出现在了这个语法的严格造成的。</p>
<h2><a id="1%E6%8A%A5%E9%94%99" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1 报错</h2>
<p>具体报错信息如下:<br />
<img src="http://image.redtea.top//imagevue%E7%B3%BB%E5%88%97_ts%E8%AF%AD%E6%B3%95%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%E6%8A%A5%E9%94%99_20231024171652.png?e=9000000000&amp;token=_pgcTSP3oIupXCcKpdZYLsvKfaaNPV-1PBxNOtDy:0fLhfo1v8bhB3Jx4noi1L9MZQ4s=" alt="image.png" /></p>
<h2><a id="2%E7%BC%98%E7%94%B1" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2 缘由</h2>
<p>更严格的类属性检查<br />
TypeScript 2.7引入了一个新的控制严格性的标记 <code>--strictPropertyInitialization</code></p>
<p>使用这个标记会确保类的每个实例属性都会在构造函数里或使用属性初始化器赋值。 在某种意义上，它会明确地进行从变量到类的实例属性的赋值检查</p>
<h2><a id="3%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3 解决办法</h2>
<p>找到文件中的tsconfig.json配置文件，增加或者修改配置 将严格初始初始化属性去掉<br />
 <code>&quot;strictPropertyInitialization&quot;: false,</code></p>
<p><img src="http://image.redtea.top//imagevue%E7%B3%BB%E5%88%97_vueTS%E4%B8%A5%E6%A0%BC%E8%AF%AD%E6%B3%95_20231024171420.png?e=9000000000&amp;token=_pgcTSP3oIupXCcKpdZYLsvKfaaNPV-1PBxNOtDy:jrrUiF8qqMMpyVDi1qvLL1x27Gw=" alt="image.png" /></p>
<p>参考链接 ：</p>
<ul>
<li><a href="https://juejin.cn/post/7068542157967065119">探索TypeScript中的高级编译器选项 - 掘金</a></li>
<li><a href="https://www.tslang.cn/docs/release-notes/typescript-2.7.html">TypeScript 2.7 · TypeScript中文网 · TypeScript——JavaScript的超集</a></li>
</ul>
<p>本文作者：redtea 红茶的博客<br />
本文链接：<a href="https://redtea.top/16964281020029.html">https://redtea.top/16964281020029.html</a><br />
版权声明：本文采用 知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，非商业转载及引用请注明出处（作者、原文链接），商业转载请联系作者获得授权。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx报错413的解决流程]]></title>
    <link href="redtea.top/17366923511122.html"/>
    <updated>2025-01-12T22:32:31+08:00</updated>
    <id>redtea.top/17366923511122.html</id>
    <content type="html"><![CDATA[
<p>最近在处理项目问题的时候，遇到了有这么一个有趣的问题，不像其他的报错401、502、500 等，这直接报错了413，这在开发中是常见有不常见的一个状态码，代表着这在使用中有nginx上的问题。</p>
<h2><a id="1-nginx%E6%8A%A5%E9%94%99413" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1 nginx报错413</h2>
<h3><a id="1-1%E9%97%AE%E9%A2%98%E6%98%BE%E7%A4%BA%EF%BC%9A" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.1 问题显示：</h3>
<p>nginx 出现413 Request Entity Too Large<br />
界面中添加了对应的图纸数据，点击保存，调用更新接口，数据中数据实体过多</p>
<h3><a id="1-2%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.2 问题排查</h3>
<ul>
<li>在网页出现错误的时候，首先就是查看请求日志，做问题复现</li>
<li>查询运行日志</li>
</ul>
<h3><a id="1-3%E5%8E%9F%E5%9B%A0" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.3 原因</h3>
<p>nginx在做代理时候，对实际的数据转发有默认的限制，限制大小为1mb，这个可以在配置文件中进行修改</p>
<h3><a id="1-4%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.4 解决办法</h3>
<ul>
<li>找到nginx配置文件 一般默认的路径是在<code>/etc/nginx/nginx.conf</code></li>
<li>使用vi或者vim命令打开文件进行修改 ，英文模式下，按住i键进入编辑模式</li>
<li>找到其中的http{}模块，模块中添加<code>client_max_body_size 20m;</code> ,数字可以根据实际情况自定义，esc退出编辑，<code>:wq</code> ，退出保存数据</li>
<li>重启nginx ,<code>sudo systemctl restart nginx</code></li>
</ul>
<h3><a id="1-5%E9%99%84%E5%BD%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.5 附录</h3>
<p>pgsql中查询数据大小：</p>
<pre class="line-numbers"><code class="language-sql">SELECT id, DATA-&gt;&gt;'name' AS filename , length(DATA::TEXT)/ 1024 AS leMB
FROM tablename
WHERE username= 'admin'
ORDER BY leMB DESC ;
</code></pre>
<p>修改参数：<br />
<img src="http://image.redtea.top//imagejava%E5%BC%80%E5%8F%91_nginx%E6%8A%80%E6%9C%AF_%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A4%A7%E5%B0%8F%E9%99%90%E5%88%B6%E4%BF%AE%E6%94%B9.png?e=9000000000&amp;token=_pgcTSP3oIupXCcKpdZYLsvKfaaNPV-1PBxNOtDy:94lRP8TcZGLTx9Tl9PaStsjmt-s=" alt="5214bac6584a3c894e8bacd41344f0f.png" /></p>
<h3><a id="%E7%BB%93%E8%AF%AD" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>结语</h3>
<p>在遇到问题的时候，不着急，先看看报错日志，确定问题的位置，更好的能解决问题。</p>
<p>本文作者：redtea 红茶的博客<br />
本文链接：<a href="https://redtea.top/">https://redtea.top</a><br />
版权声明：本文采用 知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，非商业转载及引用请注明出处（作者、原文链接），商业转载请联系作者获得授权。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于node.js 和hexo框架搭建博客系统]]></title>
    <link href="redtea.top/17366925472154.html"/>
    <updated>2025-01-12T22:35:47+08:00</updated>
    <id>redtea.top/17366925472154.html</id>
    <content type="html"><![CDATA[
<p>在搭建系统的部分中，也有一种比较简单的方式去搭建属于自己的博客系统。具体实现部分的如下，使用命令。</p>
<p>1、下载node的框架，用于做为博客系统的基础<br />
<code>npm install node.js</code> </p>
<p>2、切换下载源，使用指向淘宝镜像</p>
<pre class="line-numbers"><code class="language-linux">npm install -g cnpm --registry=http://registry.npm.taobao.org```
</code></pre>
<p>3、下载博客框架hexo</p>
<pre class="line-numbers"><code class="language-plain_text">cnpm install -g hexo-cli
</code></pre>
<p>4、建博客的文件路径<br />
/Users/tom 目录下 使用命令 <code>mkdir blog</code></p>
<p>5、进入文件夹目录下安装博客框架<br />
<code>cd blog</code>  进入博客，使用命令<code>sudo hexo init</code>,就能实现下载完成,命令<code>ls -la</code> 可以查看下载的内容<br />
<img src="https://raw.githubusercontent.com/goodtome/Picture-warehouse/master/%E5%85%AC%E4%BC%97%E5%8F%B7%E5%B9%B3%E5%8F%B0/202208192250042-blog-%E4%B8%8B%E8%BD%BD%E6%A1%86%E6%9E%B6.png" alt="" /></p>
<p>6、在根目录下启动博客<br />
使用命令 <code>sudo hexo s</code>，就能启动博客。本地访问地址是<code>http://localhost:4000/</code> ，占用本地的端口号是4000，如果想改端口号，使用命令<code>sudo hexo s -p 5555</code></p>
<p>7、hexo官网的命令<br />
在官网中使用的命令有，创建博客<code>hexo new &quot;My New Post&quot;</code> ，启动命令<code>hexo server</code> ，配置文件更新<code>hexo generate</code> ，远程部署<code>hexo deploy</code><br />
回到命令行按住Ctrl+C退出。所有文章均以.md格式保存在<code>/source/_posts</code>我们可以在此目录下删除或添加文章。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[语雀和速度赛跑的8小时，我们学习到了什么？]]></title>
    <link href="redtea.top/17366922593174.html"/>
    <updated>2025-01-12T22:30:59+08:00</updated>
    <id>redtea.top/17366922593174.html</id>
    <content type="html"><![CDATA[
<p>2023年10 月 23 日 14 时左右，蚂蚁集团旗下的在线文档编辑与协同工具语雀发生服务器故障，在线文档和官网目前均无法打开。</p>
<p>事情虽然已经过去了有几天，现在回过头来看整个事情，梳理这其中的一些关键点，看看哪些是能在其中学习到一些知识的。</p>
<h2><a id="1%E7%AE%80%E8%BF%B0%E6%95%B4%E4%B8%AA%E4%BA%8B%E4%BB%B6" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1 简述整个事件</h2>
<p>从时间线上分析：</p>
<ul>
<li>14:07 数据存储运维团队收到监控系统报警，定位到原因是存储在升级中因新的运维工具 bug 导致节点机器下线；</li>
<li>14:15 联系硬件团队尝试将下线机器重新上线；</li>
<li>15:00 确认因存储系统使用的机器类别较老，无法直接操作上线，立即调整恢复方案为从备份系统中恢复存储数据；</li>
<li>15:10 开始新建存储系统，从备份中开始恢复数据，由于语雀数据量庞大，此过程历时较长；</li>
<li>19:00 完成数据恢复，同时为保障数据完整性，在完成恢复后，用时 2 个小时进行数据校验；</li>
<li>21:00 存储系统通过完整性校验，开始和语雀团队联调。</li>
<li>22:00 恢复语雀全部服务，用户所有数据均未丢失。<br />
这些内容梳理在语雀官方的故障公告中已经有提及到的：</li>
</ul>
<blockquote>
<p>[!note] 这是公告链接：<a href="https://mp.weixin.qq.com/s/WFLLU8R4bmiqv6OGa-QMcw">https://mp.weixin.qq.com/s/WFLLU8R4bmiqv6OGa-QMcw</a></p>
</blockquote>
<h2><a id="2%E8%AF%AD%E9%9B%80%E7%9A%84%E5%A4%84%E7%90%86%E6%80%9D%E8%80%83" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2 语雀的处理思考</h2>
<p>这次的宕机，给作为技术人员，运营人员，以及个人都会有不同的思考。<br />
在技术上的具体宕机的细节，其实外人无从知晓，不过从故障的公告中，能看到语雀团队在技术上的一些细节。<br />
以下是关于语雀公告中提及到的他们的解决方案：</p>
<pre class="line-numbers"><code class="language-plain_text">1、升级硬件版本和机型，实现离线后的快速上线。该措施在本次故障修复中已完成；
2、运维团队加强运维工具的质量保障与测试，杜绝此类运维 bug 再次发生；
3、缩小运维动作灰度范围，增加灰度时间，提前发现 bug；
4、从架构和高可用层面改进服务，为语雀增加存储系统的异地灾备。
</code></pre>
<p>在这个公告中， 其实能看到的几个解决方案，也是在技术实现和运营中经常会使用到的。<br />
升级硬件的处理。在测试开发环境或者是前期的用户体量比较小的时候，大多是觉得基本的硬件能满足条件就行，基于研发成本和维护成本，大概率不会将硬件的配置升级的很高，去应对可能不会经常出现的事故。</p>
<p>在测试和BUG寻找上，特意有提及到了两种改进的意见。作为开发，经常也会遇见语雀中的形似问题，自己开发环境，测试环境都是能正常运行的，实际上到了生产环境上，各种问题就层出不穷，只能说现实的环境远比理想更加的恶劣。</p>
<p>对此来说，也正如语雀那样，通过在测试阶段更多的增加更多对现实生产环境的模拟，更早的将问题暴露出来，及时解决，避免在生产中造成更大的问题。</p>
<p>除开对硬件和问题流程的优化上，另外一个对技术和资金要求比较大点就是，在软件技术层上的优化。 对于这样一个用户和数据量比较巨大的成熟软件里说，想要直接对技术上进行大的重构 ，基本还是比较困难的，毕竟牵一发而动全身，所涉及到的方方面面都比价多。不可能是一朝一夕就能完成的，是需要在一定的技术能力和时间的支撑下才能完成。相信，以这个团队的能力来说，未来还是很快就能实现的，</p>
<p>人无完人，金无赤足。同理，任何一个软件都会存在一些不可知的BUG，也会出现未知错误，没有办法能根治的。</p>
<p>更多的能考虑到可能发生的问题，提前感知处理，站在用户的角度去实际使用体验软件技术带来的便利性，增加更多人在使用中的体验感。</p>
<h2><a id="3%E4%BA%8B%E5%90%8E%E7%9A%84%E8%A1%A5%E5%81%BF" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3 事后的补偿</h2>
<p>既然，问题发生了，给用户也带来了困扰，必然会有一些机制或者补偿去让更多是人满足。</p>
<p>语雀团队的处理就是一个字，砸钱，营销到让你满意。针对这次发生的错误直接补偿6个月会员。这可是真不少的，很多C端软件发生错误是没有或者只有很少的补偿的。</p>
<p>可以说，这六个月的会员让大部分人都满意的，不少网友甚至希望每年都来上那么一两次这样的事故，毕竟谁不希望能白白获得福利呢。</p>
<p>还有在另外一个方面来说，这种大方的行为，变相的将事故作为了一个营销点，更多的人了解了语雀，获得的一定的用户增长。</p>
<h2><a id="4%E5%85%B3%E4%BA%8E%E8%BF%99%E4%B8%AA%E4%BA%8B%E6%83%85%E7%9A%84%E6%80%9D%E8%80%83" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4 关于这个事情的思考</h2>
<p>对于普通人来说，这样的事情能带给人们的思考有那么几点：</p>
<h3><a id="4-1%E4%B8%80%E6%98%AF%E4%B8%80%E5%AE%9A%E5%81%9A%E5%A5%BD%E6%9C%AC%E5%9C%B0%E5%92%8C%E4%BA%91%E7%AB%AF%E5%90%8C%E6%AD%A5%E7%9A%84%E5%A4%87%E4%BB%BD" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.1 一是一定做好本地和云端同步的备份</h3>
<p>云端协同，固然是有能很便捷，在任何地方都是能查看处理的。一个很大的弊端是一但这个服务出现问题，损失的不仅仅只是资料，更有可能会耽误很多事情，造成直接或者间接的经济损失。</p>
<p>这时候，多端备份，本地化的重要性就体现出来了，云端出现了问题还有本地的，A机器出了问题，还有B机器的，就是不怕出问题。</p>
<h3><a id="4-2%E4%BA%8C%E6%98%AF%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98%E4%B8%8D%E5%8F%AF%E6%80%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.2 二是出现问题不可怕</h3>
<p>确实的，出现了问题，其实不可怕的。只要能积极的面对问题，寻找合适待解决方案去解决问题，并及时告知与之相关的人员,大家心里都有底。</p>
<p>很多时候，可怕的就是出现了问题，隐瞒出题，大家没有了知情权，就蒙在了鼓里。等到有一天，大家就会突然发现原来自己曾经是被欺骗过了，那种感觉会让人很不舒服。</p>
<h3><a id="4-3%E4%B8%89%E6%98%AF%E7%9C%9F%E8%AF%9A" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4.3 三是真诚</h3>
<p>突然脑子里就想起了这个词，联系语雀这个事情，总的来看，各个方面都还挺真诚的。<br />
从出事情开始，语雀就在微博上更新发现问题，真诚的给大家足够的知情权。</p>
<p>此后也是在一直更新处理的进度，让大众能看到处理的希望。</p>
<p>最后是拿故障公告，不仅写出了事情的原因，详细的解决方案，更是还给了用户福利。这些点就是真诚，很打动人，这在这个社会上算是比较少见的，也是收获了一只好评。</p>
<p>所以真诚就是必杀技！</p>
<p>说了那么多，吃瓜是娱乐，如果能将事情结合自己的工作生活，给自己带来启示和发展，这就是吃瓜的终极奥义吧。</p>
<p>本文作者：redtea 红茶的博客<br />
本文链接：<a href="https://redtea.top/">https://redtea.top/</a><br />
版权声明：本文采用 知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，非商业转载及引用请注明出处（作者、原文链接），商业转载请联系作者获得授权。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lombok boolean属性缺失get set 方法]]></title>
    <link href="redtea.top/17366916434096.html"/>
    <updated>2025-01-12T22:20:43+08:00</updated>
    <id>redtea.top/17366916434096.html</id>
    <content type="html"><![CDATA[
<p>场景：使用<code>Lombok</code>时，发现对于</p>
<p>解决方案：使用包装类型即可<code>Boolean</code></p>
<h2><a id="%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9C%BA%E6%99%AF" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>使用的场景</h2>
<p>在实际的项目中，有使用到lombok插件，这个插件能减少写代码的时候，不断的习重复的get、set方法，让代码变得简洁。</p>
<h2><a id="%E9%97%AE%E9%A2%98" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>问题</h2>
<p>俗话说，有便利的地方，必然会牺牲一部分东西作为交换的，同样，在在这个lombok也是如此，在进行相关操作的时候。<br />
有遇到是boolean基础属性，会无法调用getset方法。<br />
这是由于<code>boolean</code>的属性以<code>isXXX</code>开头时，会导致<code>Lombok</code>不会为该属性生成<code>getXXX</code>和<code>setXXX</code>方法，这是由于<code>Lombok</code>特性所致，具体原因可以见其官网说明。</p>
<h2><a id="%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>解决方法</h2>
<p>有两种办法进行解决：<br />
一是使用包装类型Boolean。<br />
二是手动对boolean设置get set方法。</p>
<h2><a id="%E7%BB%93%E8%AF%AD" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>结语</h2>
<p>代码的世界是有趣的，时常会出现一些有趣的BUG，让人防不胜防，只能不断的精进自己，去了解他们。</p>
<p>本文作者：redtea 红茶的博客<br />
本文链接：<a href="https://redtea.top/">https://redtea.top</a><br />
版权声明：本文采用 知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，非商业转载及引用请注明出处（作者、原文链接），商业转载请联系作者获得授权。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala语言函数式编程数组转换错误]]></title>
    <link href="redtea.top/17366917224390.html"/>
    <updated>2025-01-12T22:22:02+08:00</updated>
    <id>redtea.top/17366917224390.html</id>
    <content type="html"><![CDATA[
<p>在使用scala函数式编程语言写对应的代码的时候，使用数组相关的知识，出现了转换的错误，不能正确输出对应的数组内容。</p>
<h2><a id="1%E9%97%AE%E9%A2%98%EF%BC%9A" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1 问题：</h2>
<p>代码：</p>
<pre class="line-numbers"><code class="language-scala">//多维数组  
val a17 = Array.ofDim[String](2, 2)  
for (i &lt;- 0 to 1) {  
  for (j &lt;- 0 to 1) {  
    a17(i)(j) = (i + j).toString  
  }  
}  
println(&quot;a17多维数组是：&quot; + a17)
//正确方式
println(&quot;a17的正常显示数组为：&quot; + stringOf(a17))
</code></pre>
<p>输出的结果是：<br />
<code>a17多维数组是：[[Ljava.lang.String;@77b52d12</code><br />
对这个结果的解释是：</p>
<pre class="line-numbers"><code class="language-plain_text">“[” 表示一维数组  
&quot;[[&quot;表示二维数组  
&quot;L&quot;表示一个对象  
&quot;java.lang.String&quot;表示对象的类型  
&quot;@&quot;后面表示该对象的HashCode
</code></pre>
<h2><a id="2%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%EF%BC%9A" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2 解决办法：</h2>
<p>1、直接在对应的数组后面跟上一个方法，<code>Array.toString(x)</code>,就能将对应的数组显示出来了。<br />
2、导入一个打印美化包<br />
<code>import scala.runtime.ScalaRunTime.stringOf</code><br />
在引包以后，调用<code>stringOf(x)</code> 方法，就能实现对数组的打印了 ,这个方法对多维数组也是生效的。<br />
3、使用mkString 方法，这个对一维数组是有效的，多维数组不能生效，使用方法 <code>x.mkString(&quot;,&quot;)</code></p>
<p>本文作者：redtea 红茶的博客<br />
本文链接：<a href="https://redtea.top/16964281020029.html">https://redtea.top/16964281020029.html</a><br />
版权声明：本文采用 知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，非商业转载及引用请注明出处（作者、原文链接），商业转载请联系作者获得授权。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[asar文件的解压读取]]></title>
    <link href="redtea.top/17366918709445.html"/>
    <updated>2025-01-12T22:24:30+08:00</updated>
    <id>redtea.top/17366918709445.html</id>
    <content type="html"><![CDATA[
<p>在实际开发中，有这样子的需求，就是需要解压asar结尾的文件。这里会涉及到两个基础环境的安装，node.js和npm有对应的配置。<br />
在本次的实验中使用的配置如下：<br />
node版本：18<br />
npm版本：10.0.1</p>
<h2><a id="1%E7%BD%91%E4%B8%8A%E6%95%99%E7%A8%8B" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1 网上教程</h2>
<p>app.asar文件是Electron加密打包时的中间产物，electron.exe调用resources文件夹下的app.asar从而实现不用解压缩而直接读取文件内容的高效。</p>
<p>在网上的一些教程中，对asar文件的解压和打包主要是执行以下命令：</p>
<pre class="line-numbers"><code class="language-plain_text">1、安装asar 
npm install -g asar
2、cmd窗口中解压文件
asar extract app.asar ./app
3、没有表示成功
在文件夹系统中可以查看
</code></pre>
<h2><a id="2%E6%8A%A5%E9%94%99%E6%8F%90%E7%A4%BA" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2 报错提示</h2>
<p>执行安装命令中，实际会报错以下消息：</p>
<pre class="line-numbers"><code class="language-plain_text">npm WARN deprecated asar@3.2.0: Please use @electron/asar moving forward. There is no API change, just a package name change
</code></pre>
<p>原因是在新版本的框架中，已经有包含了asar的支持，不需要在额外下载对应的模块，只需要更更换执行的命令即可。</p>
<p>根据警告消息所示，官方建议改用 @electron/asar。这是一个针对 Electron 应用程序中的数据和文件管理的模块，它支持读取和打包应用内的文件，可以在命令行中使用。 您可以按照下面的步骤来更新 asar 版本：</p>
<pre class="line-numbers"><code class="language-plain_text">1. 卸载旧版 asar： `npm uninstall asar`
2. 安装新版 @electron/asar： `npm install -g @electron/asar`
3. 使用 @electron/asar 打包应用程序： `npx asar pack &lt;app_directory&gt; &lt;output_file&gt;` 
4. 读取 asar 文件： `npx asar extract &lt;input_file&gt; &lt;output_directory&gt;`
</code></pre>
<h2><a id="3%E6%89%A7%E8%A1%8C%E6%88%90%E5%8A%9F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3 执行成功</h2>
<p>按照上一步的操作，更换了执行命令以后，就能正常把文件解压。</p>
<p>所以，在执行软件的使用中，有时候需要注意版本更换以后带来的问题，及时调整对应的执行和使用命令。</p>
<p>本文作者：redtea 红茶的博客<br />
本文链接：<a href="https://redtea.top/">https://redtea.top</a><br />
版权声明：本文采用 知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，非商业转载及引用请注明出处（作者、原文链接），商业转载请联系作者获得授权。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Log4j Java 日志组件详解]]></title>
    <link href="redtea.top/17366923143719.html"/>
    <updated>2025-01-12T22:31:54+08:00</updated>
    <id>redtea.top/17366923143719.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>前言：<br />
Log4j 是 Apache 的一个开放源代码项目，通过使用 Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI 组件、甚至是套接口服务 器、NT 的事件记录器、UNIX Syslog 守护进程等；</p>
</blockquote>
<p>我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</p>
<p>最令人感兴趣的就 是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</p>
<h2><a id="1%E4%B8%BB%E8%A6%81%E7%9A%84%E7%BB%84%E4%BB%B6" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1 主要的组件</h2>
<p>Log4j有三个主要的组件：<br />
loggers： 负责捕获日志信息 ，即日志纪录器，控制日志的输出以及输出级别(JUL做日志级别用Level类)<br />
appenders： 负责输出信息到不同的目的地 ，即输出日志到指定的地方<br />
layouts： 负责使用不同的样式输出日志，即格式化日志</p>
<h3><a id="1-1%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.1 日志级别</h3>
<p>例如DEBUG、INFO、WARN、ERROR…级别是分大小的，<br />
<code>DEBUG &lt; INFO &lt; WARN &lt; ERROR</code>，可以用来代指该日志的重要程度，可以由这个来设置对应的。<br />
<img src="http://image.redtea.top//imagejava%E5%BC%80%E5%8F%91_log4j_%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB_20231025145108.png?e=9000000000&amp;token=_pgcTSP3oIupXCcKpdZYLsvKfaaNPV-1PBxNOtDy:KaOOACFFggCxPV_QfAvaqGykYnQ=" alt="image.png" /></p>
<h3><a id="1-2%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA%E4%BD%8D%E7%BD%AE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.2 日志输出位置</h3>
<p>日志输出的位置是由参数appender决定的，根据不同的参数设定，可以将日志文件自定义输出到控制台、文件中等</p>
<pre class="line-numbers"><code class="language-markdown">- 常用Appenders：
    - ConsoleAppender  
        将日志输出到控制台
    - FileAppender 
        将日志输出到文件中
    - DailyRollingFileAppender (根据天数来对新日志文件的创建)  
        将日志输出到一个日志文件，并且每天输出到一个新的文件
    - RollingFileAppender (根据大小来对新日志文件的创建)  
        将日志信息输出到一个日志文件，并且指定文件的尺寸，当文件大小达到指定尺寸时，会自动把文件改名，同时产生一个新的文件
    - JDBCAppender 
        把日志信息保存到数据库中
</code></pre>
<h3><a id="1-3%E6%97%A5%E5%BF%97%E6%A0%BC%E5%BC%8F%E5%8C%96" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.3 日志格式化</h3>
<p>在日志输出中，用户可以根据自己的实际需求，把对应的日志按照自己的想法和格式进行输出，在Layouts给用户提供四种日志输出样式。</p>
<ul>
<li>
<p>根据HTML样式</p>
</li>
<li>
<p>自由指定样式</p>
</li>
<li>
<p>包含日志级别与信息的样式</p>
</li>
<li>
<p>包含日志时间、线程、类别等信息的样式</p>
</li>
<li>
<p>常用Layouts:</p>
<ul>
<li><strong>HTMLLayout</strong><br />
格式化日志输出为HTML表格形式</li>
<li><strong>SimpleLayout</strong><br />
简单的日志输出格式化，打印的日志格式如默认INFO级别的消息</li>
<li><strong><code>PatternLayout</code></strong><br />
最强大的格式化组件，可以根据自定义格式输出日志，如果没有指定转换格式， 就是用默认的转换格式</li>
</ul>
</li>
</ul>
<p>案例使用：</p>
<pre class="line-numbers"><code class="language-plain_text">- %m 输出代码中指定的日志信息
- %p 输出优先级，及 DEBUG、INFO 等
- %n 换行符（Windows平台的换行符为 “\n”，Unix 平台为 “\n”）
- %r 输出自应用启动到输出该 log 信息耗费的毫秒数
- %c 输出打印语句所属的类的全名
- %t 输出产生该日志的线程全名
- %d 输出服务器当前时间，默认为 ISO8601，也可以指定格式，如：%d{yyyy年MM月dd日 HH:mm:ss}
- %l 输出日志时间发生的位置，包括类名、线程、及在代码中的行数。如：Test.main(Test.java:10)
- %F 输出日志消息产生时所在的文件名称
- %L 输出代码中的行号
- %% 输出一个 “%” 字符  
    可以在 % 与字符之间加上修饰符来控制最小宽度、最大宽度和文本的对其方式。 
    如：  
    %5c 输出category名称，最小宽度是5，category&lt;5，默认的情况下右对齐  
    %-5c 输出category名称，最小宽度是5，category&lt;5，&quot;-&quot;号指定左对齐,会有空格  
    %.5c 输出category名称，最大宽度是5，category&gt;5，就会将左边多出的字符截掉，&lt;5不  
    会有空格  
    %20.30c category名称&lt;20补空格，并且右对齐，&gt;30字符，就从左边交远销出的字符截掉
</code></pre>
<h3><a id="1-4%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5%E8%AF%B4%E6%98%8E%EF%BC%9A" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.4 项目使用情况说明：</h3>
<p>输出日志使用是DailyRollingFileAppender，会每天生成日志。<br />
==优化点：== 目前项目中有实时库的存在，写日志会很多，导致当日日志文件也会很大，查看日志的时候会存在打开困难的情况，可以考虑使用按大小创建日志比如300MB创建一个新的，给一个新的命名。</p>
<p>输出级别：<br />
目前的级别是在debug info warn error 这几个级别中<br />
分为两个目录写日志 debug_log 、 error_log 这两个,error中写的是info最小的，debug中写的是debug最小的。<br />
==优化点：== 两个日志写入内容有重复，<br />
1、可以在控制层对日志进行整理处理，分别在不同的地方写入不同的日志。<br />
2、规划重要耗时做debug处理，其他警告、报错信息放到error中去。</p>
<pre class="line-numbers"><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;  
&lt;!DOCTYPE log4j:configuration PUBLIC  
  &quot;-//APACHE//DTD LOG4J 1.2//EN&quot; &quot;http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd&quot;&gt;  
&lt;log4j:configuration xmlns:log4j=&quot;http://jakarta.apache.org/log4j/&quot;&gt;  
  
    &lt;appender name=&quot;A_ERROR&quot; class=&quot;org.apache.log4j.DailyRollingFileAppender&quot;&gt;  
        &lt;param name=&quot;Append&quot; value=&quot;true&quot;/&gt;  
        &lt;param name=&quot;Encoding&quot; value=&quot;UTF-8&quot; /&gt;  
        &lt;param name=&quot;File&quot; value=&quot;/var/opt/meta/webapp/logs/meta_error.log&quot;/&gt;  
        &lt;param name=&quot;DatePattern&quot; value=&quot;'.'yyyyMMdd&quot;/&gt;  
        &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt;  
            &lt;param name=&quot;ConversionPattern&quot; value=&quot;%d{yyyy/MM/dd HH:mm:ss} [%-5p] - %m%n&quot;/&gt;  
        &lt;/layout&gt;  
        &lt;filter class=&quot;org.apache.log4j.varia.LevelRangeFilter&quot;&gt;  
            &lt;param name=&quot;LevelMin&quot; value=&quot;info&quot;/&gt;  
            &lt;param name=&quot;LevelMax&quot; value=&quot;error&quot;/&gt;  
            &lt;param name=&quot;AcceptOnMatch&quot; value=&quot;true&quot;/&gt;  
        &lt;/filter&gt;  
    &lt;/appender&gt;  
  
    &lt;appender name=&quot;A_DEBUG&quot; class=&quot;org.apache.log4j.DailyRollingFileAppender&quot;&gt;  
        &lt;param name=&quot;Append&quot; value=&quot;true&quot;/&gt;  
        &lt;param name=&quot;Encoding&quot; value=&quot;UTF-8&quot; /&gt;  
        &lt;param name=&quot;File&quot; value=&quot;/var/opt/meta/webapp/logs/meta_debug.log&quot;/&gt;  
        &lt;param name=&quot;DatePattern&quot; value=&quot;'.'yyyyMMdd&quot;/&gt;  
        &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt;  
            &lt;param name=&quot;ConversionPattern&quot; value=&quot;%d{yyyy/MM/dd HH:mm:ss} [%-5p] - %m%n&quot;/&gt;  
        &lt;/layout&gt;  
        &lt;filter class=&quot;org.apache.log4j.varia.LevelRangeFilter&quot;&gt;  
            &lt;param name=&quot;LevelMin&quot; value=&quot;debug&quot;/&gt;  
            &lt;param name=&quot;LevelMax&quot; value=&quot;error&quot;/&gt;  
            &lt;param name=&quot;AcceptOnMatch&quot; value=&quot;true&quot;/&gt;  
        &lt;/filter&gt;  
    &lt;/appender&gt;  
  
    &lt;!-- framework logger --&gt;  
    &lt;logger name=&quot;java.sql&quot;&gt;  
        &lt;level value=&quot;warn&quot; /&gt;  
    &lt;/logger&gt;  
  
    &lt;logger name=&quot;org.mybatis&quot;&gt;  
        &lt;level value=&quot;warn&quot; /&gt;  
&lt;!--        &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;--&gt;  
    &lt;/logger&gt;  
  
    &lt;logger name=&quot;org.apache&quot;&gt;  
        &lt;level value=&quot;warn&quot; /&gt;  
    &lt;/logger&gt;  
  
    &lt;logger name=&quot;org.springframework&quot;&gt;  
        &lt;level value=&quot;warn&quot; /&gt;  
    &lt;/logger&gt;  
  
    &lt;!-- the root logger --&gt;  
    &lt;root&gt;  
        &lt;level value=&quot;all&quot; /&gt;  
        &lt;appender-ref ref=&quot;A_ERROR&quot; /&gt;  
        &lt;appender-ref ref=&quot;A_DEBUG&quot; /&gt;  
    &lt;/root&gt;  
  
&lt;/log4j:configuration&gt;
</code></pre>
<p>参考链接 ：<br />
<a href="https://blog.csdn.net/m0_37989980/article/details/123680391">【精选】日志框架(2) : Log4j介绍及使用_log4j日志的使用-CSDN博客</a></p>
<p><a href="https://blog.csdn.net/qq_34988540/article/details/99821083">log4j配置详解 log4j中文文档_log4j官方文档-CSDN博客</a></p>
<p>本文作者：redtea 红茶的博客<br />
本文链接：<a href="https://redtea.xn--top:-no6gt85d70ao9d2fz89hr7gd26g/">https://redtea.top版权声明：本文采用</a> 知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，非商业转载及引用请注明出处（作者、原文链接），商业转载请联系作者获得授权。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[结合mwebpro和GitHub pages的网站发布流程]]></title>
    <link href="redtea.top/17366920207557.html"/>
    <updated>2025-01-12T22:27:00+08:00</updated>
    <id>redtea.top/17366920207557.html</id>
    <content type="html"><![CDATA[
<p>在实际中有这样的几个需求，能基于一个域名快速的搭建属于自己的网站，有自己的博客。<br />
最近正好在研究，如何搭建属于自己的一个博客系统，用经济快捷的方式搭建一个属于自己的博客。</p>
<h3><a id="%E7%BD%91%E7%AB%99%E5%87%86%E5%A4%87" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>网站准备</h3>
<p>在搭建之前，是需要有几个东西提前准备的。</p>
<ol>
<li>域名，提前购买好一个域名，大概的价格也就在10元年就能搞定，可分为国内和国外的域名。国内一般需要进行备案，整体所需时间大概在1个月左右。</li>
<li>GitHub账号，可以百度GitHub，注册一个账号备用。</li>
<li>静态站点生成器，比如hugo, hexo，Jekyll等，通过这个生成的内容，上传到GitHub中，进行访问。本次选用Mac版本的mweb pro，这是一个可以写md文件和发布功能的软件。</li>
</ol>
<h3><a id="github%E4%BB%93%E5%BA%93%E8%AE%BE%E7%BD%AE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>GitHub仓库设置</h3>
<ol>
<li>
<p>GitHub主要作用，一是作为一个网站资源页面的存储仓库，二是利GitHub自带的GitHub pages发布自己的网站。</p>
</li>
<li>
<p>新建仓库，设置为public类型，仓库名字一定是 XXX.github.io，xxx是你自己定义的名字，可以随便命名。</p>
</li>
<li>
<p>仓库建好后，点击<code>settings</code>,找到 <code>pages</code> , 对网站进行设置。source中选择资源来自于网页代码的分支，branch选择对应的分支，文件夹选择默认就好，custom domain中填写上自己的网站域名，dns解析通过后，会显示绿色的<code>DNS check successful</code>。<br />
<img src="http://redtea.top/media/16963537816256/16963561739038.jpg" alt="" /></p>
</li>
<li>
<p>在设置好后，上传代码会自动进行部署，将代码部署到自己的网站上。</p>
</li>
</ol>
<h3><a id="%E5%9F%9F%E5%90%8D%E8%AE%BE%E7%BD%AE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>域名设置</h3>
<p>在购买域名后，还需要有几个设置，才能保证能正常访问到网页。</p>
<ol>
<li>GitHub设置dns解析。打开域名购买商或者代理商的网站，把GitHub的几个地址解析添加上去。</li>
</ol>
<pre class="line-numbers"><code class="language-plain_text">185.199.108.153
185.199.109.153
185.199.110.153
185.199.111.153
</code></pre>
<ol start="2">
<li>
<p>设置指向GitHub页面的dns代理。添加解析记录，类型选择cname，名称选择www ,内容就是自己在GitHub设置的仓库名字。<br />
<img src="http://redtea.top/media/16963537816256/16963567820685.jpg" alt="" /></p>
</li>
<li>
<p>验证是否有绑定成功，使用命令 <code>dig 自己域名</code>，可以看到解析后的域名地址。</p>
</li>
</ol>
<h3><a id="mweb-pro%E7%9A%84%E8%AE%BE%E7%BD%AE" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>mweb pro的设置</h3>
<p>前面的几部分设置好了，剩下的就是网页页面的编写，可以按照以下的步骤进行设置。<br />
<img src="http://redtea.top/media/16963537816256/16963575233471.jpg" alt="" /></p>
<ol>
<li>在第一步中添加一个静态网站分类，然后进行设置。</li>
<li>填写好名称，选择想要的模版，有好几个模版选择，可以一一尝试找到自己的风格。</li>
<li>网站名称，填写属于自己的博客名字。</li>
<li>网站地址就是自己的网址。</li>
<li>设置好后，选择清理并重新生成网站，就能得到新的网站页面</li>
<li>选择上传GitHub后，等代GitHub的自动化部署完成，就能直接访问了。</li>
</ol>
<p>在构建的过程中，会遇到各种错误，可以根据这些错误去搜索解决办法解决，当真的网站搭建成功后，整个人都是快乐的。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[obsidan中附件管理的原则和处理方案]]></title>
    <link href="redtea.top/17366917846698.html"/>
    <updated>2025-01-12T22:23:04+08:00</updated>
    <id>redtea.top/17366917846698.html</id>
    <content type="html"><![CDATA[
<p>在做笔记的过程中，不可避免的会涉及到图片的分享。是选择将图片直接放在本地，还是将文件通过图床的方式进行分享、本地只存图片连接。</p>
<p>本文将结合这两种方式，进行分析，说说我自己的看法和实践经验，至少这两种方案都有使用过。</p>
<h2><a id="1%E7%BA%AF%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1 纯本地存储</h2>
<p>当初使用这个本地储存的原因，也是刚由其他笔记转为使用obsidan，看中的就是能将笔记放在本地，能确保自己的笔记真属于自己。不会因为，使用其他平台服务器故障，宕机的情况下笔记丢失。</p>
<p>在这个前提下，实际就能做本地图片附件的管理，重要的就是能将图片重命名和放下特定位置下做管理，这就是解决本地存储的最大问题。</p>
<h3><a id="1-1%E8%A7%A3%E5%86%B3%E8%BF%99%E4%B8%AA%E9%97%AE%E9%A2%98%E4%B8%BB%E8%A6%81%E5%B0%B1%E6%9C%89%E4%B8%A4%E4%B8%AA%E6%AD%A5%E9%AA%A4%EF%BC%9A" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>1.1 解决这个问题主要就有两个步骤：</h3>
<p>一是对obsidan软件本身设定附件文件夹，设置好对应的附件文件夹的路径，这样能保证所有的图片都能放在这个路径下。</p>
<p>二是使用插件<code>paste image rename</code> ， 进行如图设置后，就能进行自动重命名了，方便后期查找。</p>
<p><img src="http://image.redtea.top/images/202311111807594.png?e=9000000000&amp;token=_pgcTSP3oIupXCcKpdZYLsvKfaaNPV-1PBxNOtDy:3QAO205eSdXC1Yn-uGrGW2rPIp8=" alt="" /></p>
<p><img src="http://image.redtea.top/images/202311111807565.png?e=9000000000&amp;token=_pgcTSP3oIupXCcKpdZYLsvKfaaNPV-1PBxNOtDy:lcRv7PLP_XZpOcdA4MCsvUhOAww=" alt="" /></p>
<h2><a id="2%E4%BA%91%E7%AB%AF%E5%AD%98%E5%82%A8" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2 云端存储</h2>
<p>云端存储，能实现的最大方便之处在于，本地没有了太多的图片文件，不会再影响obsdian的加载速度。</p>
<p>使用这种方式有很多的方案可以实现，总的方向就是存储仓库+图床工具+obsdian插件。</p>
<h3><a id="2-1%E5%AD%98%E5%82%A8%E4%BB%93%E5%BA%93%E7%9A%84%E9%80%89%E6%8B%A9" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2.1 存储仓库的选择</h3>
<p>在存储仓库的选择上，其实还是蛮多的。就比如，如果你是程序员，可以尝试GitHub 、gitee这种，平时经常在使用的，也不用花费任何费用，学习成本也相对较低。</p>
<p>其次，可以选择，腾讯云、阿里云、华为云等的oss存储技术，简单快捷，之间简单配置下就能使用，不用折腾太多的技术。它的优点就是简单快捷，费用也相对便宜，一年几十块就能搞定。</p>
<p>再有就是相对花费高或者学习成本高的技术手段，直接上nas系统，将自己的储存放在自己的私有服务器中。还有就是拥有一台自己的服务，搭建属于自己的文件系统，在这个文件系统中做文件内容的管理，这种就会要求使用者有一定的技术能力，能在使用过程中，解决遇到的各种问题。<br />
<img src="http://image.redtea.top/images/202311111807534.png?e=9000000000&amp;token=_pgcTSP3oIupXCcKpdZYLsvKfaaNPV-1PBxNOtDy:Ncgj80wreux2Ux6u6DzJvnG9WEc=" alt="" /></p>
<p>仓库的选择还是相对重要，一旦选择，意味着接下来很长一段时间都会在使用这个仓库，只要这个仓库的内容多起来以后，想要做迁移，其实还是会存在很大的困难的。</p>
<p>所以，在开始的时候，可以考虑好自己想要的仓库，做好未来两三年都会使用这个仓库的决定，以减少不必要的麻烦。</p>
<h3><a id="2-2%E5%9B%BE%E5%BA%8A%E5%B7%A5%E5%85%B7%E7%9A%84%E9%80%89%E6%8B%A9" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2.2 图床工具的选择</h3>
<p>这个也是在做云端文件存储中很重要的一个环节。一般分为在线的小图床工具和比较知名的有专属客户端的图床工具。</p>
<p>以前也用过在线的图床工具，使用了一段时间，发现其实还是有不少不方便的地方，在每一次上传图片的时候，需要自行登陆网站，上传好对应的图片以后，复制上传好的链接，在填写到自己的文章中，这种的效率实际上来说是增加了一个工作流的过程，拖慢了工作效率。</p>
<p>后面发现还有专属客户端的工具，真香。能结合自己现有的工作流去快速的增加工作效率，真正提升自己的幸福感。就简单的例子，在对软件做好配置以后，能直接截图实现图片自动上传，上传后的链接自动保存剪贴板，直接ctrl+v就能使用，不可谓不快。</p>
<h3><a id="2-3-obsidan%E6%8F%92%E4%BB%B6" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>2.3 obsidan插件</h3>
<p>云端存储这个过程中，在配合使用obsdian的相关插件使用，可定会使用到的就是这个图片上传的插件<code>image auto plugin</code>,能实现图片的自动上传。</p>
<p><img src="http://image.redtea.top/images/202311111804895.png?e=9000000000&amp;token=_pgcTSP3oIupXCcKpdZYLsvKfaaNPV-1PBxNOtDy:TLX4_ctnDPfmT2TQoQfQ9r4Zp08=" alt="" /></p>
<h2><a id="3%E6%9C%AC%E5%9C%B0%E4%BA%91%E7%AB%AF%E7%9A%84%E5%AD%98%E5%82%A8%E5%BD%A2%E5%BC%8F" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>3 本地+云端的存储形式</h2>
<p>由于在做笔记的时候涉及到的图片多是一些截图或者不是很大的图片，并且是希望更多的将图片放在本地做管理，这样更加保险一点。</p>
<p>这种做法的核心是，把所有的图片放在obsdian的特定文件夹下，结合给图片修改名字的插件<code>paste image rename</code> ,实现将文件名字和文章的标题结合起来，方便后期查找。</p>
<p>需要使用到云端储存的图片，比如发布文章的时候 ，可以将单独把图片上传到云端去。</p>
<p>在这个方案下，既可以确保笔记的安全性，也能保障在写文章的时候足够的便捷，随时分享。</p>
<h2><a id="4%E7%BB%93%E8%AF%AD" class="anchor" aria-hidden="true"><span class="octicon octicon-link"></span></a>4 结语</h2>
<p>笔记系统中附件的管理，从来就没有谁好谁坏之分，只有最适合自己的才是更好的。也只有在实践中，不停地去探索，才能找到适合自己的方式。</p>
<p>折腾啊！就是快乐！！</p>
<p>本文作者：redtea 红茶的博客<br />
本文链接：<a href="https://redtea.top/">https://redtea.top</a><br />
版权声明：本文采用 知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议 进行许可，非商业转载及引用请注明出处（作者、原文链接），商业转载请联系作者获得授权。</p>

]]></content>
  </entry>
  
</feed>
